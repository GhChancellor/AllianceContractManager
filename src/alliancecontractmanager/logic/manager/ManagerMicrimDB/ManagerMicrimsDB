/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package alliancecontractmanager.logic.manager;

import alliancecontractmanager.db.controllers.ContractEntityJpaController;
import alliancecontractmanager.db.controllers.UserApiEntityJpaController;
import alliancecontractmanager.db.controllers.UserApiIndexEntityJpaController;
import alliancecontractmanager.db.entities.ContractEntity;
import alliancecontractmanager.db.entities.UserApiEntity;
import alliancecontractmanager.db.entities.UserApiIndexEntity;
import alliancecontractmanager.logic.enumname.StatusEnum;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

/**
 *
 * @author lele
 */
public class ManagerMicrimsDB {
    private static ManagerMicrimsDB instance = null;
    
    private ContractEntityJpaController 
     contractEntityJpaController = new ContractEntityJpaController
     (Persistence.createEntityManagerFactory("AllianceContractManagerPU"));
    
    private EntityManager entityManagerEM = 
     Persistence.createEntityManagerFactory("AllianceContractManagerPU").createEntityManager();

    // Si può migliorare
    private EntityManagerFactory entityManagerFactoryEMF =
     Persistence.createEntityManagerFactory("AllianceContractManagerPU");
    
    private UserApiEntityJpaController 
     userKeyIDJpaController = new UserApiEntityJpaController
     (Persistence.createEntityManagerFactory("AllianceContractManagerPU"));
    
    public static ManagerMicrimsDB getInstance(){
        if ( instance == null ){
            instance = new ManagerMicrimsDB();
        }
        return instance;
    }
    

    // DBG
    public void addUserContractEntity(UserApiEntity userApiEntity){
        UserApiEntityJpaController apiEntityJpaController = 
         new UserApiEntityJpaController(Persistence.createEntityManagerFactory("AllianceContractManagerPU"));
        apiEntityJpaController.create(userApiEntity);
    }   
    
    /**
     * Add User Api Inde xEntity
     * @param userApiIndexEntity 
     */
    public void addUserApiIndexEntity(UserApiIndexEntity userApiIndexEntity ){
//        addUserApiIndexEntityDBGLUCA(userApiIndexEntity);    

        try {
            UserApiIndexEntityJpaController userApiIndexEntityJpaController = new 
             UserApiIndexEntityJpaController(Persistence.createEntityManagerFactory("AllianceContractManagerPU"));

            userApiIndexEntityJpaController.create(userApiIndexEntity);            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
    }

    public void addUserApiIndexEntityDBGLUCA(UserApiIndexEntity userApiIndexEntity ){
        UserApiIndexEntityJpaController userApiIndexEntityJpaController = new 
         UserApiIndexEntityJpaController(Persistence.createEntityManagerFactory("AllianceContractManagerPU"));               
        
        
        
        try {
            userApiIndexEntityJpaController.create(userApiIndexEntity);                 
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB addUserApiIndexEntityDBGLUCA");
            e.printStackTrace();
        }
        
//        try {
//            if (userApiIndexEntity.getId() != null) { 
//                userApiIndexEntityJpaController.create(userApiIndexEntity); // PERCHE?? Lo crei se esiste?
//            }                        
//        } catch (Exception e) {
//            System.out.println("ManagerMicrimsDB addUserApiIndexEntityDBGLUCA");
//            e.printStackTrace();
//        }
        
    }

    public void updateUserApiIndexEntityDBGLUCA(UserApiIndexEntity userApiIndexEntity) {
        UserApiIndexEntityJpaController userApiIndexEntityJpaController = new 
         UserApiIndexEntityJpaController(Persistence.createEntityManagerFactory("AllianceContractManagerPU"));

        try {
            userApiIndexEntityJpaController.edit(userApiIndexEntity); // Perché lo aggiorni se non esiste?
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB updateUserApiIndexEntityDBGLUCA");
            e.printStackTrace();            
        }
        
//        try {
//            if ( userApiIndexEntity.getId() == null)
//                userApiIndexEntityJpaController.edit(userApiIndexEntity); // Perché lo aggiorni se non esiste?
//        } catch (Exception e) {
//            System.out.println("ManagerMicrimsDB updateUserApiIndexEntityDBGLUCA");
//            e.printStackTrace();            
//        }
        
    }
    
    public ContractEntity getContractByID(Long id) {
        // DBGLUCA
         return contractEntityJpaController.findContractEntity(id);
    }    
    
    /**
     * Update User Api Index 
     * @param UserApiIndexEntity userApiIndexEntity 
     */
    public void updateUserApiEntity(UserApiEntity userApiEntity){

        try {
            UserApiEntityJpaController userApiEntityJpaController = 
             new UserApiEntityJpaController(entityManagerFactoryEMF);

            userApiEntityJpaController.edit(userApiEntity);            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
        
    /**
     * Get User Api Index ( all list of users )
     * @return List < UserApiIndexEntity >
     */
    public List < UserApiIndexEntity > getUserApiIndexEntity(){
        try {
            EntityManager getUserApiIndexEntityEM = 
             Persistence.createEntityManagerFactory("AllianceContractManagerPU").createEntityManager();

            TypedQuery < UserApiIndexEntity > getUserApiIndexEntityTQ =
             getUserApiIndexEntityEM.createNamedQuery("getUserApiIndex", UserApiIndexEntity.class);

            return getUserApiIndexEntityTQ.getResultList();            
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
//    /**
//     * Get User Api Index ( all list of users )
//     * @return List < UserApiIndexEntity >
//     */
//    public List < UserApiIndexEntity > getUserApiIndex(){
//        try {
//            EntityManager getUserApiIndexEM =
//             Persistence.createEntityManagerFactory("AllianceContractManagerPU").createEntityManager();
//
//            TypedQuery < UserApiIndexEntity > getUserApiIndexQT =
//             getUserApiIndexEM.createNamedQuery("getUserApiIndex", UserApiIndexEntity.class);
//            return getUserApiIndexQT.getResultList();            
//        } catch (Exception e) {
//            e.printStackTrace();
//            return null;
//        }
//    }   
    
     /**
     * Search a single user api
     * @param urlKeyIdValue
     * @return UserApiEntity
     */
    public UserApiEntity getUserApi(UserApiEntity UserApiEntity){
        try {
            // link EntityManager to MicrimsContratctAlliance db
            // prepare search a value into DB
            TypedQuery < UserApiEntity > userApiEntityTQ = 
             entityManagerEM.createNamedQuery("getUserApi", UserApiEntity.class); 

            // search value 
            userApiEntityTQ.setParameter("urlKeyIdValue", UserApiEntity.getUrlKeyIdValue());

            return userApiEntityTQ.getSingleResult();            
        } catch (Exception e) {
            System.out.println("ManagerMricimsDB getUserApi");
            e.printStackTrace();
            return null;            
        }
    }
    
    /**
     * Delete from DB User Api
     * @param Integer id 
     */    
    public void deleteUserApi(UserApiEntity userApiEntity){
        // DBG
        Long id = userApiEntity.getId();
        EntityManager deleteEM = entityManagerFactoryEMF.createEntityManager();
        
        if ( null != deleteEM ){

            try {
                EntityTransaction deleteTransactionET = 
                 deleteEM.getTransaction();
                
                deleteTransactionET.begin();
                
                Query deleteQuery = deleteEM.createQuery
                 ("DELETE FROM UserApiEntity userApiEntity WHERE USERAPIENTITY.id = " 
                  + id );

                deleteQuery.executeUpdate();
                deleteTransactionET.commit();
            } catch (Exception e) {
                System.out.println("ManagerMicrimsDB deleteDBUserApi");
                e.printStackTrace();                
            }
        }
    }         

    /**
     * DBG Forse è da eliminare, aggiunto oneToMany
     * Get All Users Api from Db
     * @return List < UserApiEntity >
     */
    public List < UserApiEntity > getUserApis(){       
        try {
            // link EntityManager to MicrimsContratctAlliance db
            // prepare search a value into DB
            TypedQuery < UserApiEntity > getDBUserApiTQ = 
             entityManagerEM.createNamedQuery("getDBUserApis", UserApiEntity.class);
            return getDBUserApiTQ.getResultList()    ;        
        } catch (Exception e) {
            System.out.println("ManagerMricimsDB GetUserApis");
            e.printStackTrace();
            return null;            
        }
    }        
    
    //-----------------------------------------
    
    /**
     * DGB da sistemare
     * Get User Contracts by title
     * @param UserApiEntity userApiEntity
     * @param ContractEntity contractEntity
     * @return List < ContractEntity >
     */
    public List < ContractEntity > getUserContractsByTitle(UserApiEntity userApiEntity, ContractEntity contractEntity){
        try {
            TypedQuery < ContractEntity > getUserContractsByTitleTQ = 
             entityManagerEM.createNamedQuery("getUserContractsByTitle", ContractEntity.class);

            getUserContractsByTitleTQ.setParameter("title", contractEntity.getTitle());
            getUserContractsByTitleTQ.setParameter("userid", userApiEntity.getId());

            return getUserContractsByTitleTQ.getResultList();            
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }        
    }    
    
    
    /**
     * Update contract
     * Chance status from outstanding to completed
     * Update field sell price
     * @param value
     * @param id 
     */
    public void updateContract(ContractEntity contractEntity){
//        init();
        
        try {
            EntityManager updateContractEM = 
             entityManagerFactoryEMF.createEntityManager();
                     
            if ( updateContractEM != null ){
                EntityTransaction updateTransactionET =
                 updateContractEM.getTransaction();

                updateTransactionET.begin();

                Query query = getQueryDB(contractEntity, updateContractEM);

                query.setParameter("id", contractEntity.getId() );

                query.executeUpdate();
                updateTransactionET.commit();
             }            
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB updateContract");
            e.printStackTrace();
            return;
        }
    }    
    
    
    public ManagerMicrimsDB(){    
    }    
    
     /**
     * Get all ship from DB that correspond to this parameters 
     * 'completed', 'outstanding', expired
     * @param String title
     * @return List < ContractEntity >
     */
    public List < ContractEntity > getContractStatusByTitle(ContractEntity contractEntity){
        try {
            TypedQuery < ContractEntity > getDBContractShipsSoldQT = 
             entityManagerEM.createNamedQuery("getContractStatusByTitle", ContractEntity.class);

            getDBContractShipsSoldQT.setParameter("title", contractEntity.getTitle());
            getDBContractShipsSoldQT.setParameter("status", contractEntity.getStatusContract());

            return getDBContractShipsSoldQT.getResultList();            
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB1 getContractStatusByTitle");
            e.printStackTrace();
            return null;
        }
    }

    /**
     * tatus Contract is setted like 'completed'
     * @param Date String title, Date dateCompleted
     * @return  List < ContractEntity >
     */
    public List < ContractEntity > getContractsCompletedSelectDate( ContractEntity contractEntity){
        try {
            TypedQuery < ContractEntity > getDBContractShipsSoldDateTQ = 
             entityManagerEM.createNamedQuery("getContractsCompletedSelectDate", ContractEntity.class);

            getDBContractShipsSoldDateTQ.setParameter("dateCompleted", contractEntity.getDateCompletedUnformatted());
            getDBContractShipsSoldDateTQ.setParameter("title", contractEntity.getTitle());

            return getDBContractShipsSoldDateTQ.getResultList();            
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB1 getContractsCompletedSelectDate");
            e.printStackTrace();
            return null;
        }
    }    
    
    /**
     * Get Contracts Completed All Date
     * @param String title
     * @return 
     */    
    public List < ContractEntity > getContractsCompletedAllDate( String title){
        try {
            TypedQuery < ContractEntity > getDBContractShipsSoldAllDateTQ = 
             entityManagerEM.createNamedQuery("getContractsCompletedAllDate", ContractEntity.class);

            getDBContractShipsSoldAllDateTQ.setParameter("title", title);       
            return getDBContractShipsSoldAllDateTQ.getResultList();            
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB1 getContractsCompletedSelectDate");
            e.printStackTrace();
            return null;            
        }
    }
   
    /**
     * Get all contract with same title from DB
     * @param title
     * @return List < ContractEntity >
     */
    public List < ContractEntity > getContractsTitle(ContractEntity contractEntity){
        try {
            // link EntityManager to MicrimsContratctAlliance db       
            // prepare search a value into DB
            TypedQuery < ContractEntity > getDBContractsTitleTQ = 
             entityManagerEM.createNamedQuery
             ("getContractsTitle", ContractEntity.class);

            getDBContractsTitleTQ.setParameter("title", contractEntity.getTitle() );
            return getDBContractsTitleTQ.getResultList();            
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB1 getContractsTitle");
            e.printStackTrace();
            return null;             
        }
    }

    /**
     * Get contracts status ( completed, outstanding and expired )
     * @param statusContract
     * @return List < ContractEntity >
     */
    public List < ContractEntity > getContractsStatus(ContractEntity contractEntity){
        try {
            TypedQuery < ContractEntity > getDBContractsStatusTQ = 
             entityManagerEM.createNamedQuery
             ("getContractsStatus", ContractEntity.class);

            getDBContractsStatusTQ.setParameter("statusContract", contractEntity.getStatusContract());
            return getDBContractsStatusTQ.getResultList();            
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB1 getContractsStatus");
            e.printStackTrace();
            return null;             
        }
    }

    /**
     * DBG1 - Conrtollare
     * Search date expired
     * @param dateExpired
     * @return 
     */
    public ContractEntity getContractDateExpired(Date dateExpired){
        try {
            TypedQuery < ContractEntity > getContractDateExpiredQT = 
             entityManagerEM.createNamedQuery("getContractDateExpired", ContractEntity.class);

            getContractDateExpiredQT.setParameter("dateExpired", dateExpired);
            List < ContractEntity > contractEntitys = getContractDateExpiredQT.getResultList();
            
            if ( contractEntitys.isEmpty()){
                return null;
            }else{
                return contractEntitys.get(0);
            }
                  
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB getContractDateExpired");
            e.printStackTrace();
            return null;
        }
    }   
    
    /**
     * DBG unsed
     * Write Contract In DB
     * @param contractEntity 
     */
    // public void addContract(ContractEntity contractEntity){
    public void addContract(UserApiEntity userApiEntity){
        addContractDBGLUCA(userApiEntity);
        // contractEntityJpaController.create(contractEntity);
    }

    /**
     * Write Contract In DB
     * @param contractEntity 
     */
    public void addContractDBGLUCA(UserApiEntity userApiEntity){
        
        List < ContractEntity > contractEntitys = userApiEntity.getAllContractEntitys();
        
        try {
            for (ContractEntity contractEntity : contractEntitys) {
                contractEntity.setUserEntityId(userApiEntity.getId());
                contractEntityJpaController.create(contractEntity);
                userKeyIDJpaController.edit(userApiEntity);
            }            
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB addContractDBGLUCA");
            e.printStackTrace();
        }
    }

    
    
    /**
     * Get All contracts from Db
     * @return List < ContractEntity >
     */
    public List < ContractEntity > getContracts(){
        
        try {
            TypedQuery < ContractEntity > getDBContractsTQ =
             entityManagerEM.createNamedQuery("getContracts", ContractEntity.class);
            
            return getDBContractsTQ.getResultList();
        } catch (Exception e) {
            System.out.println("ManagerMicrimDB getContracts");
            e.printStackTrace();
            return null ;
        }
    }

    /**
     * DBG
     * Get DB Contract Id ( id that of the database NOT these from eve )
     * @param String id
     * @return ContractEntity
     */
    public ContractEntity getLongId(ContractEntity contractEntity){
        try {
            TypedQuery < ContractEntity > getDBContractIdTQ =
             entityManagerEM.createNamedQuery("getContractsId", ContractEntity.class);

            getDBContractIdTQ.setParameter("id", contractEntity.getId() );
            return getDBContractIdTQ.getSingleResult();                       
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB getDBContractId");
            e.printStackTrace();
            return null;
        }
    }

    /**
     * DBG get Contract Eve Id ( from Eve Server )
     * @param contractEntity
     * @return 
     */
    public ContractEntity getContractEveId(ContractEntity contractEntity){
        try {
            TypedQuery < ContractEntity > getDBContractIdTQ =
             entityManagerEM.createNamedQuery("getContractsId", ContractEntity.class);

            getDBContractIdTQ.setParameter("id", contractEntity.getContractID());
            return getDBContractIdTQ.getSingleResult();                       
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB getDBContractId");
            e.printStackTrace();
            return null;
        }
    }    
    
    /**
     * Get Query DB
     * @param value
     * @param contractEntity
     * @param entityManagerEM
     * @return Query
     */
    private Query getQueryDB(ContractEntity contractEntity, EntityManager entityManagerEM){

        // check contract.getPriceSell and contractEntity.getPriceSell are differnt       
        // DBG fa cagare
        if ( contractEntity.getTempQualcosaDBG() == 1 ){
            Query query = updatePriceSell(contractEntity, entityManagerEM);
            contractEntity.setTempQualcosaDBG(0);
            return query;
        }
        
       // update status to completed
        if ( contractEntity.getStatusContract().equals(StatusEnum.OUTSTADING.getStatus() )){
            // Change value from outstanding to completed
            Query query = updateStatusContract(contractEntity, entityManagerEM);
            return query;
        }
        
        // update status to expired
        if ( contractEntity.getStatusContract().equals(StatusEnum.EXPIRED.getStatus())){
            Query query = updateStatusContractRemoveID(contractEntity, entityManagerEM);
            return query;             
        }
        
        return null;
    }

    /**
     * THIS IS CRIME AGAINST HUMANITY!!!!!!!
     * 
     * Quando un contrattato in outstading scade il contractID viene recilato per
     * uno nuovo contratto, mentre quello vecchio viene perso.
     * Cancello contractID proveniente da Eve ma l'oggetto non viene perso grazie
     * l'ID di mysql che resta in archivio. Il suo status passa da "Oustanding" a "Expired"
     * @param contractEntity
     * @param entityManagerEM
     * @return Query
     */
    private Query updateStatusContractRemoveID(ContractEntity contractEntity, 
     EntityManager entityManagerEM){
        Long id = contractEntity.getId();
        String statusContract = contractEntity.getStatusContract();
        
        Query query = entityManagerEM.createQuery(
         "UPDATE ContractEntity contractEntity SET CONTRACTENTITY.statusContract ='" + statusContract 
         + "', CONTRACTENTITY.contractID='' WHERE CONTRACTENTITY.id = :id");
        return query;
    }    
    
    /**
     * Change value sell price
     * @param value
     * @param id
     * @param entityManagerEM
     * @return Query
     */
    private Query updatePriceSell(ContractEntity contractEntity, EntityManager entityManagerEM){
        Long id = contractEntity.getId();
        String value = contractEntity.getPriceBuyUnformatted();
        
        Query query = entityManagerEM.createQuery
        ("UPDATE ContractEntity contractEntity set CONTRACTENTITY.priceBuy = '"
        + value + "' WHERE CONTRACTENTITY.id = :id" );
        return query;        
    }
    
    /**
     * Change value from outstanding to completed
     * @param value
     * @param id
     * @param entityManagerEM
     * @return Query
     */
    private Query updateStatusContract(ContractEntity contractEntity, EntityManager entityManagerEM){
        Long id = contractEntity.getId();
        String value = contractEntity.getStatusContract();
        // :id
        
        Query query = entityManagerEM.createQuery
        ("UPDATE ContractEntity contractEntity set CONTRACTENTITY.statusContract = '"
        + value  + "' WHERE CONTRACTENTITY.id = :id"  );
        
        return query;
    }

    /**
     * Delete a contract
     * @param value
     * @param id 
     */
    public void deleteContract(ContractEntity contractEntity){
        try {
            EntityManager deleteEM = entityManagerFactoryEMF.createEntityManager();

            if ( deleteEM != null ){
                EntityTransaction deleteET = deleteEM.getTransaction();
                deleteET.begin();

                Query deleteQuery = deleteEM.createQuery
                ("DELETE FROM ContractEntity contractEntity WHERE CONTRACTENTITY.id = " +
                 contractEntity.getId());
                deleteQuery.executeUpdate();
                deleteET.commit();
            }            
        } catch (Exception e) {
            System.out.println("ManagerMicrimsDB deleteContract");
            e.printStackTrace();
        }
    }
    
    
}
